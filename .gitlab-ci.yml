default:
  tags:
    - payment-gitlab-runner # runner tag

variables:
  GO_VERSION: "1.18"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  DOCKER_TLS_CERTDIR: ""

stages:
  - pre-build           # lint code, run unit tests, and compile binaries
  - build               # build and publish the Docker image(s) for test
  - test                # check, test, and scan the Docker images
  - release
  - deploy              # deploy the application

.go:
  image: golang:$GO_VERSION
  stage: pre-build

go:test:
  extends: .go
  script:
    - go get -t ./...
    - go install gotest.tools/gotestsum@latest
    - go install github.com/boumenot/gocover-cobertura@latest
    # run tests, create coverprofile, and create junit report
    - gotestsum --junitfile report.xml --format testname -- -race -coverprofile=coverage.txt -covermode atomic ./...
    # write coverage report
    - gocover-cobertura < coverage.txt > coverage.xml
    # extract coverage score
    - go tool cover -func coverage.txt
  coverage: '/total:.*\d+.\d+%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

go:lint:
  extends: .go
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  script:
    - echo "Start linting..."
    - golangci-lint run --issues-exit-code 0 --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

go:mod:tidy:
  extends: .go
  allow_failure: true
  script:
    - wget https://gitlab.com/gitlab-org/security-products/ci-templates/-/raw/master/scripts/git-hooks/go-mod-tidy
    - sh go-mod-tidy

build:
  image: docker:20.10
  stage: build
  services:
    - docker:20.10-dind
  variables:
    DOCKERFILE: "./cmd/payment-api/Dockerfile"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CONTAINER_TEST_IMAGE -t $CONTAINER_RELEASE_IMAGE -f $DOCKERFILE .
    - docker push $CONTAINER_TEST_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - main

deploy:
  image: alpine:latest
  stage: deploy
  services:
    - docker:20.10.16-dind
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $CONTAINER_RELEASE_IMAGE"
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cd payments/payment-service && docker-compose up -d --build --force-recreate"
  only:
    - main
  environment:
    name: development
    url: https://api-payment-go.savvycom.xyz